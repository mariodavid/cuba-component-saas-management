buildscript {
  ext.cubaVersion = '7.2.13'
  repositories {
    mavenCentral()
    maven {
      url 'https://dl.bintray.com/cuba-platform/main'
    }
    jcenter()
  }
  dependencies {
    classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
  }
}

def modulePrefix = 'ccsm'

def globalModule = project(":${modulePrefix}-global")
def coreModule = project(":${modulePrefix}-core")
def webModule = project(":${modulePrefix}-web")

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'

apply(plugin: 'cuba')

cuba {
  artifact {
    group = 'de.diedavids.cuba.ccsm'
    version = '0.1.1'
    isSnapshot = true
  }
}

dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
    appComponent('com.haulmont.addon.sdbmt:sdbmt-global:2.0.2')
    appComponent('com.haulmont.addon.restapi:restapi-global:7.2.3')
}

def postgres = 'org.postgresql:postgresql:42.2.5'

configure([globalModule, coreModule, webModule]) {
  apply(plugin: 'java')
  apply(plugin: 'maven')
  apply(plugin: 'cuba')

  dependencies {
    testCompile('org.junit.jupiter:junit-jupiter-api:5.5.2')
    testCompile('org.junit.jupiter:junit-jupiter-engine:5.5.2')
    testCompile('org.junit.vintage:junit-vintage-engine:5.5.2')

    testCompile("org.assertj:assertj-core:3.11.1")

    testCompile 'org.mockito:mockito-core:3.2.4'
    testCompile 'org.mockito:mockito-junit-jupiter:3.2.4'

    testCompile('org.spockframework:spock-core:1.2-groovy-2.5')
    testCompile('org.springframework:spring-test:4.3.1.RELEASE')
    testRuntime "cglib:cglib-nodep:3.2.4"

    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    testCompile('org.junit.jupiter:junit-jupiter-api:5.5.2')
    testCompile('org.junit.jupiter:junit-jupiter-engine:5.5.2')
    testCompile('org.junit.vintage:junit-vintage-engine:5.5.2')
  }

  task sourceJar(type: Jar) {
    from file('src')
    classifier = 'sources'
  }

  artifacts {
    archives sourceJar
  }

  test {
    useJUnitPlatform()
  }

  test {
    useJUnitPlatform()
  }
}

configure([globalModule, coreModule, webModule]) {
  apply(plugin: 'groovy')

  sourceSets {
    main {
      groovy { srcDirs = ["src"] }
      // new config
      java.outputDir = new File(project.buildDir, "classes/main")
      groovy.outputDir = new File(project.buildDir, "classes/main")
    }
    test {
      groovy { srcDirs = ["test"] }
      // new config
      java.outputDir = new File(project.buildDir, "classes/test")
      groovy.outputDir = new File(project.buildDir, "classes/test")
    }
  }

  sourceSets.main.output.classesDirs.setFrom(new File(project.buildDir, "classes/main"))
  sourceSets.test.output.classesDirs.setFrom(new File(project.buildDir, "classes/test"))
}

configure(globalModule) {
  dependencies {
    if (!JavaVersion.current().isJava8()) {
      runtime('javax.xml.bind:jaxb-api:2.3.1')
      runtime('org.glassfish.jaxb:jaxb-runtime:2.3.1')
    }

    compile 'com.chargebee:chargebee-java:2.7.5'
  }

  entitiesEnhancing {
    main {
      enabled = true
    }
  }

  jar {
    manifest {
      attributes('App-Component-Id': cuba.artifact.group)
      attributes('App-Component-Version': cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : ''))
    }
  }
}

configure(coreModule) {

  configurations {
    jdbc
    dbscripts
  }

  dependencies {
    compile(globalModule)
    compileOnly(servletApi)
    jdbc(postgres)
    testRuntime(postgres)
  }

  task cleanConf(description: 'Cleans up conf directory', type: Delete) {
    delete "$cuba.appHome/${modulePrefix}-core/conf"
  }

  task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
    appName = "${modulePrefix}-core"
    appJars(modulePrefix + '-global', modulePrefix + '-core')
  }

  task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
    dbms = 'postgres'
    host = 'localhost'
    dbName = 'ccsm-test-3'
    dbUser = 'postgres'
    dbPassword = 'postgres'
  }

  task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
    dbms = 'postgres'
    host = 'localhost'
    dbName = 'ccsm-test-3'
    dbUser = 'postgres'
    dbPassword = 'postgres'
  }
}

configure(webModule) {
  configurations {
    webcontent
  }

  dependencies {
    compileOnly(servletApi)
    compile(globalModule)
  }

  task webArchive(type: Zip) {
    from file("$buildDir/web")
    from file('web')
    classifier = 'web'
  }

  artifacts {
    archives webArchive
  }

  task deployConf(type: Copy) {
    from file('src')
    include "de/diedavids/cuba/ccsm/**"
    into "$cuba.appHome/${modulePrefix}/conf"
  }

  task clearMessagesCache(type: CubaClearMessagesCache) {
    appName = "${modulePrefix}"
  }
  deployConf.dependsOn clearMessagesCache

  task cleanConf(description: 'Cleans up conf directory', type: Delete) {
    delete "$cuba.appHome/${modulePrefix}/conf"
  }

  task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
    appName = "${modulePrefix}"
    appJars(modulePrefix + '-global', modulePrefix + '-web')
  }
}

task undeploy(type: Delete, dependsOn: ":${modulePrefix}-web:cleanConf") {
  delete("$cuba.tomcat.dir/shared")
  delete("$cuba.tomcat.dir/webapps/${modulePrefix}-core")
  delete("$cuba.tomcat.dir/webapps/${modulePrefix}")
}

task restart(dependsOn: ['stop', ":${modulePrefix}-core:deploy", ":${modulePrefix}-web:deploy"], description: 'Redeploys applications and restarts local Tomcat') {
  doLast {
    ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
      not {
        socket(server: 'localhost', port: '8787')
      }
    }
  }
}
restart.finalizedBy start

